{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krish\\\\Desktop\\\\hospital patient list\\\\patient-list-app\\\\src\\\\components\\\\PatientList.js\";\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'id',\n  headerName: 'ID',\n  width: 90\n}, {\n  field: 'firstName',\n  headerName: 'First name',\n  width: 150,\n  editable: true\n}, {\n  field: 'lastName',\n  headerName: 'Last name',\n  width: 150,\n  editable: true\n}, {\n  field: 'age',\n  headerName: 'Age',\n  type: 'number',\n  width: 110,\n  editable: true\n}, {\n  field: 'fullName',\n  headerName: 'Full name',\n  description: 'This column has a value getter and is not sortable.',\n  sortable: false,\n  width: 160,\n  valueGetter: params => `${params.row.firstName || ''} ${params.row.lastName || ''}`\n}];\nconst rows = [{\n  id: 1,\n  lastName: 'Snow',\n  firstName: 'Jon',\n  age: 35\n}, {\n  id: 2,\n  lastName: 'Lannister',\n  firstName: 'Cersei',\n  age: 42\n}, {\n  id: 3,\n  lastName: 'Lannister',\n  firstName: 'Jaime',\n  age: 45\n}, {\n  id: 4,\n  lastName: 'Stark',\n  firstName: 'Arya',\n  age: 16\n}, {\n  id: 5,\n  lastName: 'Targaryen',\n  firstName: 'Daenerys',\n  age: null\n}, {\n  id: 6,\n  lastName: 'Melisandre',\n  firstName: null,\n  age: 150\n}, {\n  id: 7,\n  lastName: 'Clifford',\n  firstName: 'Ferrara',\n  age: 44\n}, {\n  id: 8,\n  lastName: 'Frances',\n  firstName: 'Rossini',\n  age: 36\n}, {\n  id: 9,\n  lastName: 'Roxie',\n  firstName: 'Harvey',\n  age: 65\n}];\nexport default function PatientList() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignContent: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        height: 400,\n        width: '6%'\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        initialState: {\n          pagination: {\n            paginationModel: {\n              pageSize: 5\n            }\n          }\n        },\n        pageSizeOptions: [5],\n        checkboxSelection: true,\n        disableRowSelectionOnClick: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n// import {Button} from \"@mui/material\";\n// import React, {useState, useEffect} from \"react\";\n// import {patientData} from \"./Data\";\n\n// const PatientList = () => {\n//     const [search, setSearch] = useState(\"\");\n//     const [filteredData, setFilteredData] = useState(patientData);\n//     const [showModal, setShowModal] = useState(false);\n//     const [editingPatient, setEditingPatient] = useState(null);\n//     const [newPatientData, setNewPatientData] = useState({\n//         name: \"\",\n//         gender: \"\",\n//         dob: \"\",\n//         image: \"\"\n//     });\n\n//     useEffect(() => {\n//         const results = patientData.filter(patient =>\n//             patient.name.toLowerCase().includes(search.toLowerCase())\n//         );\n//         setFilteredData(results);\n//     }, [search]);\n\n//     const handleSearch = event => {\n//         setSearch(event.target.value);\n//     };\n\n//     const handleEdit = patient => {\n//         setEditingPatient(patient);\n//         setNewPatientData(patient);\n//         setShowModal(true);\n//     };\n\n//     const handleSave = () => {\n//         if (editingPatient) {\n//             // Edit existing patient\n//             const updatedData = patientData.map(patient =>\n//                 patient.id === editingPatient.id ? newPatientData : patient\n//             );\n//             setFilteredData(updatedData);\n//             localStorage.setItem(\"patientData\", JSON.stringify(updatedData));\n//         } else {\n//             // Add new patient\n//             const newPatient = {\n//                 id: patientData.length + 1,\n//                 ...newPatientData\n//             };\n//             const updatedData = [...patientData, newPatient];\n//             setFilteredData(updatedData);\n//             localStorage.setItem(\"patientData\", JSON.stringify(updatedData));\n//         }\n//         setShowModal(false);\n//         setEditingPatient(null);\n//         setNewPatientData({\n//             name: \"\",\n//             gender: \"\",\n//             dob: \"\",\n//             image: \"\"\n//         });\n//     };\n\n//     const handleCancel = () => {\n//         setShowModal(false);\n//         setEditingPatient(null);\n//         setNewPatientData({\n//             name: \"\",\n//             gender: \"\",\n//             dob: \"\",\n//             image: \"\"\n//         });\n//     };\n\n//     const handleInputChange = event => {\n//         const {name, value} = event.target;\n//         setNewPatientData(prevData => ({\n//             ...prevData,\n//             [name]: value\n//         }));\n//     };\n\n//     return (\n//         <div>\n//             <input type=\"text\" value={search} onChange={handleSearch} />\n//             <ul>\n//                 {filteredData.map(patient => (\n//                     <li key={patient.id}>\n//                         <img src={patient.image} alt={patient.name} />\n//                         <p>{patient.name}</p>\n//                         <p>{patient.dob}</p>\n//                         <p>{patient.gender}</p>\n//                         <button onClick={() => handleEdit(patient)}>Edit</button>\n//                     </li>\n//                 ))}\n//             </ul>\n//             {showModal && (\n//                 <div className=\"modal\">\n//                     <div className=\"modal-content\">\n//                         <h2>{editingPatient ? \"Edit Patient\" : \"Add New Patient\"}</h2>\n//                         <form>\n//                             <label htmlFor=\"name\">Name:</label>\n//                             <input type=\"text\" id=\"name\" name=\"name\" value={newPatientData.name} onChange={handleInputChange} />\n//                             <label htmlFor=\"gender\">Gender:</label>\n//                             <input type=\"text\" id=\"gender\" name=\"gender\" value={newPatientData.gender} onChange={handleInputChange} />\n//                             <label htmlFor=\"dob\">Date of Birth:</label>\n//                             <input type=\"text\" id=\"dob\" name=\"dob\" value={newPatientData.dob} onChange={handleInputChange} />\n//                             <label htmlFor=\"image\">Image URL:</label>\n//                             <input type=\"text\" id=\"image\" name=\"image\" value={newPatientData.image} onChange={handleInputChange} />\n//                         </form>\n//                         <Button onClick={handleSave}>Save</Button>\n//                         <Button onClick={handleCancel}>cancel</Button>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default PatientList;\n_c = PatientList;\nvar _c;\n$RefreshReg$(_c, \"PatientList\");","map":{"version":3,"names":["React","Box","DataGrid","jsxDEV","_jsxDEV","columns","field","headerName","width","editable","type","description","sortable","valueGetter","params","row","firstName","lastName","rows","id","age","PatientList","style","display","justifyContent","alignContent","children","sx","height","initialState","pagination","paginationModel","pageSize","pageSizeOptions","checkboxSelection","disableRowSelectionOnClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/krish/Desktop/hospital patient list/patient-list-app/src/components/PatientList.js"],"sourcesContent":["import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport {DataGrid} from '@mui/x-data-grid';\r\n\r\nconst columns = [\r\n    {field: 'id', headerName: 'ID', width: 90},\r\n    {\r\n        field: 'firstName',\r\n        headerName: 'First name',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'lastName',\r\n        headerName: 'Last name',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'age',\r\n        headerName: 'Age',\r\n        type: 'number',\r\n        width: 110,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'fullName',\r\n        headerName: 'Full name',\r\n        description: 'This column has a value getter and is not sortable.',\r\n        sortable: false,\r\n        width: 160,\r\n        valueGetter: (params) =>\r\n            `${params.row.firstName || ''} ${params.row.lastName || ''}`,\r\n    },\r\n];\r\n\r\nconst rows = [\r\n    {id: 1, lastName: 'Snow', firstName: 'Jon', age: 35},\r\n    {id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42},\r\n    {id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45},\r\n    {id: 4, lastName: 'Stark', firstName: 'Arya', age: 16},\r\n    {id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null},\r\n    {id: 6, lastName: 'Melisandre', firstName: null, age: 150},\r\n    {id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44},\r\n    {id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36},\r\n    {id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65},\r\n];\r\n\r\nexport default function PatientList() {\r\n    return (\r\n        <div style={{display:\"flex\", justifyContent:\"center\",alignContent:\"center\"}}>\r\n        <Box sx={{height: 400, width: '6%',}} >\r\n            <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                initialState={{\r\n                    pagination: {\r\n                        paginationModel: {\r\n                            pageSize: 5,\r\n                        },\r\n                    },\r\n                }}\r\n                pageSizeOptions={[5]}\r\n                checkboxSelection\r\n                disableRowSelectionOnClick\r\n            />\r\n        </Box>\r\n</div>\r\n    );\r\n}\r\n\r\n// import {Button} from \"@mui/material\";\r\n// import React, {useState, useEffect} from \"react\";\r\n// import {patientData} from \"./Data\";\r\n\r\n// const PatientList = () => {\r\n//     const [search, setSearch] = useState(\"\");\r\n//     const [filteredData, setFilteredData] = useState(patientData);\r\n//     const [showModal, setShowModal] = useState(false);\r\n//     const [editingPatient, setEditingPatient] = useState(null);\r\n//     const [newPatientData, setNewPatientData] = useState({\r\n//         name: \"\",\r\n//         gender: \"\",\r\n//         dob: \"\",\r\n//         image: \"\"\r\n//     });\r\n\r\n//     useEffect(() => {\r\n//         const results = patientData.filter(patient =>\r\n//             patient.name.toLowerCase().includes(search.toLowerCase())\r\n//         );\r\n//         setFilteredData(results);\r\n//     }, [search]);\r\n\r\n//     const handleSearch = event => {\r\n//         setSearch(event.target.value);\r\n//     };\r\n\r\n//     const handleEdit = patient => {\r\n//         setEditingPatient(patient);\r\n//         setNewPatientData(patient);\r\n//         setShowModal(true);\r\n//     };\r\n\r\n//     const handleSave = () => {\r\n//         if (editingPatient) {\r\n//             // Edit existing patient\r\n//             const updatedData = patientData.map(patient =>\r\n//                 patient.id === editingPatient.id ? newPatientData : patient\r\n//             );\r\n//             setFilteredData(updatedData);\r\n//             localStorage.setItem(\"patientData\", JSON.stringify(updatedData));\r\n//         } else {\r\n//             // Add new patient\r\n//             const newPatient = {\r\n//                 id: patientData.length + 1,\r\n//                 ...newPatientData\r\n//             };\r\n//             const updatedData = [...patientData, newPatient];\r\n//             setFilteredData(updatedData);\r\n//             localStorage.setItem(\"patientData\", JSON.stringify(updatedData));\r\n//         }\r\n//         setShowModal(false);\r\n//         setEditingPatient(null);\r\n//         setNewPatientData({\r\n//             name: \"\",\r\n//             gender: \"\",\r\n//             dob: \"\",\r\n//             image: \"\"\r\n//         });\r\n//     };\r\n\r\n//     const handleCancel = () => {\r\n//         setShowModal(false);\r\n//         setEditingPatient(null);\r\n//         setNewPatientData({\r\n//             name: \"\",\r\n//             gender: \"\",\r\n//             dob: \"\",\r\n//             image: \"\"\r\n//         });\r\n//     };\r\n\r\n//     const handleInputChange = event => {\r\n//         const {name, value} = event.target;\r\n//         setNewPatientData(prevData => ({\r\n//             ...prevData,\r\n//             [name]: value\r\n//         }));\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <input type=\"text\" value={search} onChange={handleSearch} />\r\n//             <ul>\r\n//                 {filteredData.map(patient => (\r\n//                     <li key={patient.id}>\r\n//                         <img src={patient.image} alt={patient.name} />\r\n//                         <p>{patient.name}</p>\r\n//                         <p>{patient.dob}</p>\r\n//                         <p>{patient.gender}</p>\r\n//                         <button onClick={() => handleEdit(patient)}>Edit</button>\r\n//                     </li>\r\n//                 ))}\r\n//             </ul>\r\n//             {showModal && (\r\n//                 <div className=\"modal\">\r\n//                     <div className=\"modal-content\">\r\n//                         <h2>{editingPatient ? \"Edit Patient\" : \"Add New Patient\"}</h2>\r\n//                         <form>\r\n//                             <label htmlFor=\"name\">Name:</label>\r\n//                             <input type=\"text\" id=\"name\" name=\"name\" value={newPatientData.name} onChange={handleInputChange} />\r\n//                             <label htmlFor=\"gender\">Gender:</label>\r\n//                             <input type=\"text\" id=\"gender\" name=\"gender\" value={newPatientData.gender} onChange={handleInputChange} />\r\n//                             <label htmlFor=\"dob\">Date of Birth:</label>\r\n//                             <input type=\"text\" id=\"dob\" name=\"dob\" value={newPatientData.dob} onChange={handleInputChange} />\r\n//                             <label htmlFor=\"image\">Image URL:</label>\r\n//                             <input type=\"text\" id=\"image\" name=\"image\" value={newPatientData.image} onChange={handleInputChange} />\r\n//                         </form>\r\n//                         <Button onClick={handleSave}>Save</Button>\r\n//                         <Button onClick={handleCancel}>cancel</Button>\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default PatientList;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}