{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krish\\\\Desktop\\\\hospital patient list\\\\patient-list-app\\\\src\\\\components\\\\DialogBox.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DialogBox(setIsOpen, isOpen) {\n  _s();\n  // const [isOpen, setIsOpen] = React.useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      setOpen: setOpen,\n      children: \"Open responsive dialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      fullScreen: fullScreen,\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"responsive-dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"responsive-dialog-title\",\n        children: \"Use Google's location service?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          autoFocus: true,\n          onClick: handleClose,\n          children: \"Disagree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          autoFocus: true,\n          children: \"Agree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(DialogBox, \"s4YKggqTL4GpL1vhNriIrg3n/tw=\", false, function () {\n  return [useTheme, useMediaQuery];\n});\n_c = DialogBox;\nvar _c;\n$RefreshReg$(_c, \"DialogBox\");","map":{"version":3,"names":["React","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","useMediaQuery","useTheme","jsxDEV","_jsxDEV","DialogBox","setIsOpen","isOpen","_s","theme","fullScreen","breakpoints","down","handleClickOpen","setOpen","handleClose","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","open","onClose","id","autoFocus","onClick","_c","$RefreshReg$"],"sources":["C:/Users/krish/Desktop/hospital patient list/patient-list-app/src/components/DialogBox.js"],"sourcesContent":["import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport {useTheme} from '@mui/material/styles';\r\n\r\nexport default function DialogBox(setIsOpen, isOpen) {\r\n    // const [isOpen, setIsOpen] = React.useState(false);\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" setOpen={setOpen}>\r\n                Open responsive dialog\r\n            </Button>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"responsive-dialog-title\">\r\n                    {\"Use Google's location service?\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Let Google help apps determine location. This means sending anonymous\r\n                        location data to Google, even when no apps are running.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose}>\r\n                        Disagree\r\n                    </Button>\r\n                    <Button onClick={handleClose} autoFocus>\r\n                        Agree\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,iBAAiB,MAAM,iCAAiC;AAC/D,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,aAAa,MAAM,6BAA6B;AACvD,SAAQC,QAAQ,QAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,SAASA,CAACC,SAAS,EAAEC,MAAM,EAAE;EAAAC,EAAA;EACjD;EACA,MAAMC,KAAK,GAAGP,QAAQ,EAAE;EACxB,MAAMQ,UAAU,GAAGT,aAAa,CAACQ,KAAK,CAACE,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAE9D,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1BC,OAAO,CAAC,IAAI,CAAC;EACjB,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtBD,OAAO,CAAC,KAAK,CAAC;EAClB,CAAC;EAED,oBACIV,OAAA;IAAAY,QAAA,gBACIZ,OAAA,CAACT,MAAM;MAACsB,OAAO,EAAC,UAAU;MAACH,OAAO,EAAEA,OAAQ;MAAAE,QAAA,EAAC;IAE7C;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACTjB,OAAA,CAACR,MAAM;MACHc,UAAU,EAAEA,UAAW;MACvBY,IAAI,EAAEA,IAAK;MACXC,OAAO,EAAER,WAAY;MACrB,mBAAgB,yBAAyB;MAAAC,QAAA,gBAEzCZ,OAAA,CAACJ,WAAW;QAACwB,EAAE,EAAC,yBAAyB;QAAAR,QAAA,EACpC;MAAgC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvB,eACdjB,OAAA,CAACN,aAAa;QAAAkB,QAAA,eACVZ,OAAA,CAACL,iBAAiB;UAAAiB,QAAA,EAAC;QAGnB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAoB;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACR,eAChBjB,OAAA,CAACP,aAAa;QAAAmB,QAAA,gBACVZ,OAAA,CAACT,MAAM;UAAC8B,SAAS;UAACC,OAAO,EAAEX,WAAY;UAAAC,QAAA,EAAC;QAExC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eACTjB,OAAA,CAACT,MAAM;UAAC+B,OAAO,EAAEX,WAAY;UAACU,SAAS;UAAAT,QAAA,EAAC;QAExC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACX;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACP;AAEd;AAACb,EAAA,CA5CuBH,SAAS;EAAA,QAEfH,QAAQ,EACHD,aAAa;AAAA;AAAA0B,EAAA,GAHZtB,SAAS;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}